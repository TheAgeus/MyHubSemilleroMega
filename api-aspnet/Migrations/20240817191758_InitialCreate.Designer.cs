// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieHubApi.Context;

#nullable disable

namespace MovieHubApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240817191758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieHubApi.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Serieid")
                        .HasColumnType("int");

                    b.Property<string>("description_c")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("season_number_c")
                        .HasColumnType("int");

                    b.Property<int>("serie_id")
                        .HasColumnType("int");

                    b.Property<string>("title_c")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Serieid");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("MovieHubApi.Models.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("category_m")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description_m")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name_m")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieHubApi.Models.Serie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("category_s")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description_s")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name_s")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("MovieHubApi.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("color_u")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail_u")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password_u")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username_u")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_are_watching_movies", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UsersAreWatchingMovies");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_are_watching_series", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("UsersAreWatchingSeries");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_has_favorite_series", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("UsersHasFavoriteSeries");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_have_favorite_movies", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UsersHaveFavoriteMovies");
                });

            modelBuilder.Entity("MovieHubApi.Models.Chapter", b =>
                {
                    b.HasOne("MovieHubApi.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("Serieid");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_are_watching_movies", b =>
                {
                    b.HasOne("MovieHubApi.Models.Movie", "Movie")
                        .WithMany("WatchedMoviesByUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHubApi.Models.User", "User")
                        .WithMany("WatchingMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_are_watching_series", b =>
                {
                    b.HasOne("MovieHubApi.Models.Serie", "Serie")
                        .WithMany("WatchedSeriesByUsers")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHubApi.Models.User", "User")
                        .WithMany("WatchingSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_has_favorite_series", b =>
                {
                    b.HasOne("MovieHubApi.Models.Serie", "Serie")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHubApi.Models.User", "User")
                        .WithMany("FavoriteSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieHubApi.Models.Users_have_favorite_movies", b =>
                {
                    b.HasOne("MovieHubApi.Models.Movie", "Movie")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHubApi.Models.User", "User")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieHubApi.Models.Movie", b =>
                {
                    b.Navigation("FavoritedByUsers");

                    b.Navigation("WatchedMoviesByUsers");
                });

            modelBuilder.Entity("MovieHubApi.Models.Serie", b =>
                {
                    b.Navigation("FavoritedByUsers");

                    b.Navigation("WatchedSeriesByUsers");
                });

            modelBuilder.Entity("MovieHubApi.Models.User", b =>
                {
                    b.Navigation("FavoriteMovies");

                    b.Navigation("FavoriteSeries");

                    b.Navigation("WatchingMovies");

                    b.Navigation("WatchingSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
